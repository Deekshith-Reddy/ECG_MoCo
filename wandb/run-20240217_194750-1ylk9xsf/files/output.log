Creating Model
MoCo(
  (encoder_q): ECG_SpatioTemporalNet(
    (firstLayer): Sequential(
      (0): Conv2d(1, 32, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): MaxPool2d(kernel_size=(1, 7), stride=(1, 7), padding=0, dilation=1, ceil_mode=False)
    )
    (residualBlocks_time): Sequential(
      (0): temporalResidualBlock(
        (conv1): Conv2d(32, 32, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (conv2): Conv2d(32, 64, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (batchNorm1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (batchNorm2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (resampleInput): Sequential(
          (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): temporalResidualBlock(
        (conv1): Conv2d(64, 64, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (conv2): Conv2d(64, 128, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (batchNorm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (resampleInput): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): temporalResidualBlock(
        (conv1): Conv2d(128, 128, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (conv2): Conv2d(128, 256, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (batchNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (resampleInput): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): temporalResidualBlock(
        (conv1): Conv2d(256, 256, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (conv2): Conv2d(256, 256, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (batchNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (residualBlocks_space): Sequential(
      (0): spatialResidualBlock(
        (conv1): Conv2d(32, 32, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(32, 64, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (resampleInput): Sequential(
          (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): spatialResidualBlock(
        (conv1): Conv2d(64, 64, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (resampleInput): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): spatialResidualBlock(
        (conv1): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 256, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (resampleInput): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): spatialResidualBlock(
        (conv1): Conv2d(256, 256, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
      )
    )
    (integrationBlock): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Dropout(p=0.5, inplace=False)
      (3): ReLU(inplace=True)
    )
    (finalLayer): Sequential(
      (0): AdaptiveAvgPool2d(output_size=(8, 1))
      (1): Flatten(start_dim=1, end_dim=-1)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
  (encoder_k): ECG_SpatioTemporalNet(
    (firstLayer): Sequential(
      (0): Conv2d(1, 32, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): MaxPool2d(kernel_size=(1, 7), stride=(1, 7), padding=0, dilation=1, ceil_mode=False)
    )
    (residualBlocks_time): Sequential(
      (0): temporalResidualBlock(
        (conv1): Conv2d(32, 32, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (conv2): Conv2d(32, 64, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (batchNorm1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (batchNorm2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (resampleInput): Sequential(
          (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): temporalResidualBlock(
        (conv1): Conv2d(64, 64, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (conv2): Conv2d(64, 128, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (batchNorm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (resampleInput): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): temporalResidualBlock(
        (conv1): Conv2d(128, 128, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (conv2): Conv2d(128, 256, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (batchNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (resampleInput): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): temporalResidualBlock(
        (conv1): Conv2d(256, 256, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (conv2): Conv2d(256, 256, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (batchNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (residualBlocks_space): Sequential(
      (0): spatialResidualBlock(
        (conv1): Conv2d(32, 32, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(32, 64, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (resampleInput): Sequential(
          (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): spatialResidualBlock(
        (conv1): Conv2d(64, 64, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (resampleInput): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): spatialResidualBlock(
        (conv1): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 256, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
        (resampleInput): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): spatialResidualBlock(
        (conv1): Conv2d(256, 256, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
        (batchNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (drop): Dropout(p=0.5, inplace=False)
      )
    )
    (integrationBlock): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Dropout(p=0.5, inplace=False)
      (3): ReLU(inplace=True)
    )
    (finalLayer): Sequential(
      (0): AdaptiveAvgPool2d(output_size=(8, 1))
      (1): Flatten(start_dim=1, end_dim=-1)
      (2): Linear(in_features=4096, out_features=128, bias=True)
    )
  )
)
Pre Training using 32464 ECGs
Epoch: [0][ 0/63]	Time 30.279 (30.279)	Data 25.227 (25.227)	Loss 1.0154e-01 (1.0154e-01)	Acc@1 100.00 (100.00)	Acc@5 100.00 (100.00)
Epoch: [0][20/63]	Time  0.604 ( 2.004)	Data  0.000 ( 1.202)	Loss 7.9103e+00 (7.5735e+00)	Acc@1  10.94 ( 22.43)	Acc@5  22.66 ( 35.90)
Epoch: [0][40/63]	Time  0.594 ( 1.320)	Data  0.000 ( 0.623)	Loss 8.9121e+00 (8.0228e+00)	Acc@1  17.19 ( 17.59)	Acc@5  33.59 ( 31.84)
Epoch: [0][60/63]	Time  0.606 ( 1.085)	Data  0.000 ( 0.423)	Loss 9.4080e+00 (8.4098e+00)	Acc@1  10.94 ( 14.46)	Acc@5  16.41 ( 28.16)
Traceback (most recent call last):
  File "main.py", line 173, in <module>
    main()
  File "main.py", line 161, in main
    mp.spawn(main_moco.main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))
  File "/home/sci/jbergquist/python_dev_env/lib/python3.7/site-packages/torch/multiprocessing/spawn.py", line 240, in spawn
    return start_processes(fn, args, nprocs, join, daemon, start_method='spawn')
  File "/home/sci/jbergquist/python_dev_env/lib/python3.7/site-packages/torch/multiprocessing/spawn.py", line 198, in start_processes
    while not context.join():
  File "/home/sci/jbergquist/python_dev_env/lib/python3.7/site-packages/torch/multiprocessing/spawn.py", line 160, in join
    raise ProcessRaisedException(msg, error_index, failed_process.pid)
torch.multiprocessing.spawn.ProcessRaisedException:
-- Process 3 terminated with the following error:
Traceback (most recent call last):
  File "/home/sci/jbergquist/python_dev_env/lib/python3.7/site-packages/torch/multiprocessing/spawn.py", line 69, in _wrap
    fn(i, *args)
  File "/home/collab/deekshith.dade/moco_project/main_moco.py", line 138, in main_worker
    train(pre_train_loader, model, criterion, optimizer, epoch, args)
  File "/home/collab/deekshith.dade/moco_project/main_moco.py", line 200, in train
    'acc@5': acc5[0]
  File "/home/sci/jbergquist/python_dev_env/lib/python3.7/site-packages/wandb/sdk/lib/preinit.py", line 36, in preinit_wrapper
    raise wandb.Error(f"You must call wandb.init() before {name}()")
wandb.errors.Error: You must call wandb.init() before wandb.log()